import numpy as np
from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler

# 샘플 입력 데이터: (1개 샘플, 3세트, 7개 feature)
# 평균 심박수, 최대 심박수, 세트 시간, 중량, 반복 횟수, 운동 부위, RPE
import numpy as np

# X: (samples, 3세트, 7개 feature)
X = np.array([
    # 저강도 루틴
    [[110, 120, 60, 40, 15, 0, 2],
     [115, 125, 60, 45, 15, 0, 3],
     [118, 128, 60, 50, 15, 0, 4]],

    [[115, 125, 60, 50, 15, 0, 3],
     [120, 130, 60, 55, 12, 0, 4],
     [125, 135, 60, 60, 12, 0, 5]],

    # 중간 강도
    [[125, 135, 60, 70, 10, 0, 5],
     [130, 140, 60, 75, 10, 0, 6],
     [135, 145, 60, 80, 10, 0, 6]],

    # 고강도 루틴
    [[140, 150, 60, 90, 8, 0, 7],
     [145, 155, 60, 95, 8, 0, 8],
     [150, 160, 60, 100, 8, 0, 9]],

    [[135, 150, 60, 40, 10, 0, 7],
    [140, 155, 60, 45, 10, 0, 8],
    [145, 160, 60, 50, 10, 0, 9]],
])

# y: 다음 세트에 대한 예측값 [중량, 반복 수]
y = np.array([
    [55, 16],   # 저강도 → 반복 많고 중량 낮음
    [65, 14],   # 점점 강해짐
    [85, 10],   # 중간 강도
    [105, 8],    # 고강도 → 반복 적고 중량 큼
    [50, 12]  # 여전히 반복을 늘리고 중량은 낮게 유지
])


# 모델 구성
model = Sequential()
model.add(LSTM(64, input_shape=(3, 7)))
model.add(Dense(32, activation='relu'))
model.add(Dense(2))  # 출력 노드: [중량, 세트 수]

# 모델 컴파일
model.compile(optimizer='adam', loss='mse')


# 1. 스케일러 선언
x_scaler = MinMaxScaler()
y_scaler = MinMaxScaler()

# 2. X와 y의 모양 재정렬 (2D로 만들어서 fit)
X_reshaped = X.reshape(-1, 7)
X_scaled = x_scaler.fit_transform(X_reshaped).reshape(-1, 3, 7)

y_scaled = y_scaler.fit_transform(y)

# 3. 학습
model = Sequential()
model.add(LSTM(64, input_shape=(3, 7)))
model.add(Dense(32, activation='relu'))
model.add(Dense(2))
model.compile(optimizer='adam', loss='mse')
model.fit(X_scaled, y_scaled, epochs=100, verbose=1)

# 4. 예측용 입력도 정규화
new_input = np.array([[
    [135, 150, 60, 200, 10, 0, 7],
    [140, 155, 60, 205, 10, 0, 6],
    [145, 160, 60, 205, 10, 0, 7]
]])
new_input_scaled = x_scaler.transform(new_input.reshape(-1, 7)).reshape(1, 3, 7)

# 5. 예측 & 다시 원래 값으로 변환
prediction_scaled = model.predict(new_input_scaled)
prediction = y_scaler.inverse_transform(prediction_scaled)
predicted_weight = round(prediction[0][0])
predicted_sets = round(prediction[0][1])

print(f"다음 세트는 {predicted_weight}kg으로 {predicted_sets} 반복횟수를 권장합니다.")
